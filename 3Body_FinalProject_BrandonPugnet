import numpy as np
import matplotlib.pyplot as plt

# UNITS INFORMATION:
# Length: 1 AU = 1.496*10**11 m
# Time: 1 year = 365.25 days = 3.156*10**7 s
# Velocity: 1 AU/ year
# M_unit = 1.99*10**30 kg
# G = 6.67*10**-11N*m^2/kg^2
# conversion from year to hour: 1 year = 365.25 * 24 hours

def three_body(r, t, m):
    #Define Relative Position Vectors
    x12 = r[0,0] - r[0,1]
    x21 = -x12
    x13 = r[0,0] - r[0,2]
    x31 = -x13
    x23 = r[0,1] - r[0,2]
    x32 = -x23
    y12 = r[1,0] - r[1,1]
    y21 = -y12
    y13 = r[1,0] - r[1,2]
    y31 = -y13
    y23 = r[1,1] - r[1,2]
    y32 = -y23
    #Magnitudes of distance
    r12 = np.sqrt(x12**2 + y12**2)
    r21 = r12
    r13 = np.sqrt(x13**2 + y13**2)
    r31 = r13
    r23 = np.sqrt(x23**2 + y23**2)
    r32 = r23
    #Define masses
    m1 = m[0]
    m2 = m[1]
    m3 = m[2]
    #Accelerations
    ax1 = -G*m2*x12/r12**3 - G*m3*x13/r13**3
    ay1 = -G*m2*y12/r12**3 - G*m3*y13/r13**3
    ax2 = -G*m1*x21/r21**3 - G*m3*x23/r23**3
    ay2 = -G*m1*y21/r21**3 - G*m3*y23/r23**3
    ax3 = -G*m1*x31/r31**3 - G*m2*x32/r32**3
    ay3 = -G*m1*y31/r31**3 - G*m2*y32/r32**3
    
    a = [[ax1, ax2, ax3], [ay1, ay2, ay3]]
    a = np.array(a)
    
    return a

#Creates trajectories
def Verlet_trajectory(F, r, v, t_array, m):
    
    npoints = len(t_array)
    t = 0
    
    #position arrays
    x_data = np.zeros([npoints,3])
    y_data = np.zeros([npoints,3])
    vx_data = np.zeros([npoints,3])
    vy_data = np.zeros([npoints,3])
        
    for ii in range(npoints):
        #Initial conditions    
        if ii == 0:
            
            x_data[0,:] = r[0,:]
            y_data[0,:] = r[1,:]
            vx_data[0,:] = v[0,:]
            vy_data[0,:] = v[1,:]
            
            current_position = r
            current_velocity = v
            
            t += dt
        #additional steps    
        else:            
            a = F(current_position, t, m)
            new_position = current_position + current_velocity * dt + 0.5 *dt**2 * a
            
            a2 = F(new_position, t, m)  
            new_velocity = current_velocity + 0.5 * dt * (a + a2)
            
            t += dt  
            #stores step in these arrays
            x_data[ii, :] = new_position[0, :]
            y_data[ii, :] = new_position[1, :]
            vx_data[ii, :] = new_velocity[0, :]
            vy_data[ii, :] = new_velocity[1, :]
            
            current_position = new_position
            current_velocity = new_velocity
    
    return x_data, y_data, vx_data, vy_data    

#Find energy
def E(x, y, vx, vy, m):
    
    #Kinetic Energy
    v_tot = np.sqrt(vx**2 + vy**2)
    kinetic_E = (.5 * m * v_tot**2)* energy_conversion
    
    #Potential Energy
    npoints = len(x)
    potential_E = np.zeros([len(x),3])
    body = [0,1,2]
    #Finds the potential energy for the body in question for all points        
    for i in range(3):
        current_mass = 0
        other_masses = []
        #Find these masses that are not the body from above
        for ii in range(3):
            body = [0,1,2]
            if ii == body[i]:
                current_mass = int(i)
            else:
                other_masses.append(int(body[ii]))
        
        other_masses = np.array(other_masses)
        #rename
        cm = current_mass
        om = other_masses
        #Compute relative vectors
        x_diff0 = x[:,cm] - x[:,om[0]]
        y_diff0 = y[:,cm] - y[:,om[0]]
        x_diff1 = x[:,cm] - x[:,om[1]]
        y_diff1 = y[:,cm] - y[:,om[1]]
        #Finds the potential energy for the body in question for all points        
        for jj in range(npoints):
            distance_apart0 = np.sqrt((x_diff0[jj]**2) + (y_diff0[jj])**2)
            distance_apart1 = np.sqrt((x_diff1[jj]**2) + (y_diff1[jj])**2)
            if i == 1:
                potential_E[jj,i] = -G * m[cm] * m[om[0]] / distance_apart0 * energy_conversion + -G * m[cm] * m[om[1]] / distance_apart1 * energy_conversion
            if i == 2:
                potential_E[jj,i] = -G * m[cm] * m[om[0]] / distance_apart0 * energy_conversion
    #solves for the potential energy of the system to avoid double counting
    potential_system = np.zeros(npoints)
    for i in range(npoints):
        potential_system[i] = np.sum(potential_E[i,:])
    
    total_E = np.zeros(npoints)
    for i in range(npoints):
        total_E[i] = np.sum(kinetic_E[i,:]) + potential_system[i]
    
    return kinetic_E, potential_system , total_E

def Tidal_Force(x, y, m, R_E):
    
    #incorporate radius of earth
    
    tide_force = np.zeros([len(x),2])
    tide_mag = np.zeros([len(x)])
    phi = 0
    hour_step = 2*np.pi*365.25*dt
    for i in range(len(tide_force)):
        
        direction = np.array([-np.cos(phi), np.sin(phi)])
        
        #Computes vectors from moons to Earth
        x_dir1 = x[i,0] - x[i,1]
        y_dir1 = y[i,0] - y[i,1]
        x_dir2 = x[i,0] - x[i,2]
        y_dir2 = y[i,0] - y[i,2]
        #Tidal force equation parameters
        d0_vector1 = np.array([x_dir1, y_dir1])
        d0_vector2 = np.array([x_dir2, y_dir2])
        d0_mag1 = np.sqrt(d0_vector1[0]**2 + d0_vector1[1]**2)
        d0_mag2 = np.sqrt(d0_vector2[0]**2 + d0_vector2[1]**2)
        d0_unit1 = d0_vector1/d0_mag1
        d0_unit2 = d0_vector2/d0_mag2
        
        radius_vector = np.array([-R_E*np.cos(phi), R_E*np.sin(phi)])
        
        d_vector1 = np.array(d0_vector1 + radius_vector)
        d_vector2 = np.array(d0_vector2 + radius_vector)
        d_mag1 = np.sqrt(d_vector1[0]**2 + d_vector1[1]**2) 
        d_mag2 = np.sqrt(d_vector2[0]**2 + d_vector2[1]**2) 
        d_unit1 = d_vector1/d_mag1
        d_unit2 = d_vector2/d_mag2

        tide_force[i,:] = -G*(1/mass_conversion)*m[1]*(d_unit1/d_mag1**2 - d0_unit1/d0_mag1**2) + -G*(1/mass_conversion)*m[2]*(d_unit2/d_mag2**2 - d0_unit2/d0_mag2**2)
        tide_mag[i] = np.dot(direction, tide_force[i,:])
        phi = phi + hour_step
    #COnverts to SI
    tide_force = tide_force*force_conversion
    tide_mag = tide_mag*force_conversion

    return tide_force, tide_mag
        
def Poincare(transient_cutoff, n, x, t, dt):
    
    #Finds inidice to cut off transient values
    transient_cutoff_scaled = transient_cutoff/dt
    transient_cutoff_scaled = int(transient_cutoff_scaled)
    
    x_new = []
    t_new = []
    #Creates array of values after the transient
    for ii in range(len(x[:])):
        #print(ii)
        if ii > transient_cutoff_scaled:
            #print(ii)
            x_new.append(x[ii])
            t_new.append(t[ii])
    #sampling step for the Poincare         
    Poincare_step = int(n/dt)
         
    x0_Poincare = []
    x1_Poincare = []
    
    x0_Poincare.append(x_new[0])
    
    indicie = 0
    
    point_num = int(len(x_new)/Poincare_step)
    #assigns values to the POincare before and after arrays
    for i in range(point_num):
        next_indicie = indicie + Poincare_step
        x1_val = x_new[next_indicie]
        x1_Poincare.append(x1_val)
        
        indicie = next_indicie
        
        if i < point_num-1:
            x0_Poincare.append(x1_val)
            
    x0_Poincare = np.array(x0_Poincare)
    x1_Poincare = np.array(x1_Poincare)
                
    return x0_Poincare, x1_Poincare, x_new, t_new
    
#%%        
#Conversions
mass_conversion = 1.98542002*10**29/3.941293145013742 # Makes G = 1
#mass_conversion = 1.99*10**30 # kilograms
length_conversion = 1.496*10**11 # meters
time_conversion = 365.25 * 24 * 60 * 60 #in seconds
force_conversion = mass_conversion*length_conversion/time_conversion**2
energy_conversion = mass_conversion * length_conversion**2 /(time_conversion)**2
G_conversion = mass_conversion * time_conversion**2 / length_conversion**3

hour = 1/(365.25 * 24) # in years
earth_to_moon_distance = 384.4*10**6/length_conversion #AU
moon_velocity = .2160027257 # AU/year

#initial conditions
#Attempts at other periodic trajectories
# r = np.array([[-0.30805788, 0.0], [0.15402894, -0.09324743], [0.15402894, 0.09324743]]).T
# v = np.array([[0.0, -1.015378093], [0.963502817, 0.507689046], [-0.963502817, 0.507689046]]).T
# r = np.array([[0.97000436, -0.24308753], [-0.97000436, 0.24308753], [0.0, 0.0]]).T
# v = np.array([[0.93240737/2, 0.86473146/2], [0.93240737/2, 0.507689046/2], [-0.93240737, -0.86473146]]).T
#Trial 4&5, using a smaller velocity that the moon one & with m = m and m = m/2
r = np.array([[0.0, 0.0], [-earth_to_moon_distance, 0.0000], [earth_to_moon_distance, 0.0]]).T
v = np.array([[0.0, 0.0], [0.0, -0.107], [0.0, 0.107]]).T
#Trial 1 & Condition 2 with mass/2
# r = np.array([[0.0, 0.0], [-earth_to_moon_distance, 0.0], [earth_to_moon_distance, 0.0]]).T
# v = np.array([[0.0, 0.0], [0.0, -moon_velocity], [0.0, moon_velocity]]).T
#Trial 3 with mass = m 
# r = np.array([[0.0, 0.0], [-earth_to_moon_distance, 0.0000000000000000001], [earth_to_moon_distance, 0.0]]).T
# v = np.array([[0.0, 0.0], [0.0, -moon_velocity], [0.0, moon_velocity]]).T

R_E = 6.3781*10**6/length_conversion  

#time initialization in years    
t0 = 0.0
tf = 2.0
dt = hour/60
#For Conditions 1 and 2 used tf = 5.0 and dt = hour
#Condition 3 used tf = 4.1 years and dt = hour
#COnditions 4 and 5 used t = 2.0 and dt = hour/60
t_array = np.arange(t0,tf,dt)

#mass parameters
G = 6.6738 * 10**-11 * G_conversion
m_1 = 5.9722*10**24/mass_conversion
m_2 = 7.348*10**22/mass_conversion
m_3 = 7.348*10**22/mass_conversion

m = np.array([m_1, m_2, m_3])

#Poincare parameters
#Used a cutoff of 1.0 for first three conditions.  Used 0.5 for trials 4 and 5
#since 2.0 years was a much less sample size
transient_cutoff = 0.5 #years
n = 24*hour

#functions
x, y, vx, vy = Verlet_trajectory(three_body, r, v, t_array, m)       
KE, PE, total_E = E(x, y, vx, vy, m)
tide, tide_mag = Tidal_Force(x, y, m, R_E)
x0, x1, x_cutoff, t_cutoff = Poincare(transient_cutoff, n, tide_mag, t_array, dt)

t_array = t_array*365.25
r_dist = np.sqrt(x**2 + y**2)

#%%plots
plt.figure(1)
plt.plot(x[:,0],y[:,0], label = 'm1')
plt.plot(x[:,1],y[:,1], label = 'm2')
plt.plot(x[:,2],y[:,2], label = 'm3')
plt.scatter(r[0,0],r[1,0])
plt.scatter(r[0,1],r[1,1])
plt.scatter(r[0,2],r[1,2])
plt.xlabel('x (AU)')
plt.ylabel('y (AU)')
plt.title('Trajectory')
plt.legend()

plt.figure(2)
plt.plot(t_array,vy)
plt.xlabel('time (units)')
plt.ylabel('Y-Direction Velocity (AUM/year)')
plt.title('Y Velocity vs Time')

plt.figure(3)
plt.plot(t_array, KE)
plt.plot(t_array, PE, label = 'System PE')
plt.plot(t_array, total_E, label = 'Total Energy', linewidth = 7.0)
plt.xlabel('time (days)')
plt.ylabel('Energy (J)')
plt.title('Energy vs Time')
plt.legend()

plt.figure(4)
plt.plot(t_array, tide[:,0])
plt.xlabel('Time (units)')
plt.ylabel('Tidal Force X-Direction')
plt.title('Tidal Force in the X-Direction vs Time')

plt.figure(5)
plt.plot(t_array, tide[:,1])
plt.xlabel('Time (units)')
plt.ylabel('Tidal Force Y-Direction')
plt.title('Tidal Force in the Y-Direction vs Time')

plt.figure(6)
plt.plot(t_array, tide_mag)
plt.xlabel('Time (days)')
plt.ylabel('Tidal Force per unit mass (N/kg)')
plt.title('Tidal Force Per Kg Normal to the Earth vs Time')

plt.figure(7)
plt.scatter(x0,x1)
plt.ylabel('X_i+1')
plt.xlabel('X_i')
plt.title('Poincare Plot for Tidal Force Per Unit Mass For Two Years')
